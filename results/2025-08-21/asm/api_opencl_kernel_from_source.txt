.section .text.hpc_core::api::opencl::kernel::Kernel::from_source,"ax",@progbits
	.globl	hpc_core::api::opencl::kernel::Kernel::from_source
	.p2align	4
.type	hpc_core::api::opencl::kernel::Kernel::from_source,@function
hpc_core::api::opencl::kernel::Kernel::from_source:
		// crates/hpc-core/src/api/opencl/kernel.rs:20
		pub fn from_source(ctx: &'brand Context<'brand>, src: &str, name: &str) -> Result<Self> {
	.cfi_startproc
	.cfi_personality 155, DW.ref.rust_eh_personality
	.cfi_lsda 27, .Lexception7
	push r15
	.cfi_def_cfa_offset 16
	push r14
	.cfi_def_cfa_offset 24
	push r12
	.cfi_def_cfa_offset 32
	push rbx
	.cfi_def_cfa_offset 40
	sub rsp, 72
	.cfi_def_cfa_offset 112
	.cfi_offset rbx, -40
	.cfi_offset r12, -32
	.cfi_offset r14, -24
	.cfi_offset r15, -16
	mov r14, r9
	mov r15, r8
	mov rbx, rdi
	movabs r12, -9223372036854775808
	mov rdi, rsp
		// crates/hpc-core/src/api/opencl/kernel.rs:21
		let program = CLProgram::create_and_build_from_source(ctx.raw(), src, "")?;
	mov r8d, 1
	xor r9d, r9d
	call qword ptr [rip + opencl3::program::Program::create_and_build_from_source@GOTPCREL]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2066
		match self {
	mov rax, qword ptr [rsp]
	mov rcx, rax
	neg rcx
	movups xmm0, xmmword ptr [rsp + 8]
	movaps xmmword ptr [rsp + 32], xmm0
	mov rcx, qword ptr [rsp + 24]
	mov qword ptr [rsp + 48], rcx
	jno .LBB19_3
		// crates/hpc-core/src/error.rs:23
		Error::Msg(s)
	mov rax, qword ptr [rsp + 48]
	mov qword ptr [rsp + 20], rax
	movaps xmm0, xmmword ptr [rsp + 32]
	movups xmmword ptr [rsp + 4], xmm0
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2079
		Err(e) => Err(From::from(e)),
	mov dword ptr [rbx + 8], 1
	movups xmm0, xmmword ptr [rsp]
	mov rax, qword ptr [rsp + 12]
	mov rcx, qword ptr [rsp + 20]
	movups xmmword ptr [rbx + 12], xmm0
	mov qword ptr [rbx + 24], rax
	mov qword ptr [rbx + 32], rcx
	mov qword ptr [rbx], r12
	jmp .LBB19_12
.LBB19_3:
		// crates/hpc-core/src/api/opencl/kernel.rs:21
		let program = CLProgram::create_and_build_from_source(ctx.raw(), src, "")?;
	mov rcx, qword ptr [rsp + 48]
	mov qword ptr [rsp + 24], rcx
	movaps xmm0, xmmword ptr [rsp + 32]
	movups xmmword ptr [rsp + 8], xmm0
	mov qword ptr [rsp], rax
	lea rdi, [rsp + 56]
	mov rsi, rsp
		// crates/hpc-core/src/api/opencl/kernel.rs:22
		let inner = CLKernel::create(&program, name)?;
	mov rdx, r15
	mov rcx, r14
	call qword ptr [rip + opencl3::kernel::Kernel::create@GOTPCREL]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2066
		match self {
	cmp dword ptr [rsp + 56], 1
	jne .LBB19_11
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2068
		Err(e) => ControlFlow::Break(Err(e)),
	mov eax, dword ptr [rsp + 60]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2079
		Err(e) => Err(From::from(e)),
	mov dword ptr [rbx + 8], 0
	mov dword ptr [rbx + 12], eax
	mov qword ptr [rbx], r12
	mov rdi, rsp
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:799
		pub unsafe fn drop_in_place<T: PointeeSized>(to_drop: *mut T) {
	call qword ptr [rip + <opencl3::program::Program as core::ops::drop::Drop>::drop@GOTPCREL]
	mov rsi, qword ptr [rsp]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec/mod.rs:527
		if elem_layout.size() == 0 || self.cap.as_inner() == 0 {
	test rsi, rsi
	je .LBB19_12
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:799
		pub unsafe fn drop_in_place<T: PointeeSized>(to_drop: *mut T) {
	mov rdi, qword ptr [rsp + 8]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:114
		unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
	mov edx, 1
	call qword ptr [rip + __rustc::__rust_dealloc@GOTPCREL]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:262
		if layout.size() != 0 {
	jmp .LBB19_12
.LBB19_11:
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2067
		Ok(v) => ControlFlow::Continue(v),
	mov rax, qword ptr [rsp + 64]
		// crates/hpc-core/src/api/opencl/kernel.rs:25
		program,
	movups xmm0, xmmword ptr [rsp]
	movups xmm1, xmmword ptr [rsp + 16]
	movups xmmword ptr [rbx + 16], xmm1
	movups xmmword ptr [rbx], xmm0
		// crates/hpc-core/src/api/opencl/kernel.rs:23
		Ok(Self {
	mov qword ptr [rbx + 32], rax
.LBB19_12:
		// crates/hpc-core/src/api/opencl/kernel.rs:28
		}
	mov rax, rbx
	add rsp, 72
	.cfi_def_cfa_offset 40
	pop rbx
	.cfi_def_cfa_offset 32
	pop r12
	.cfi_def_cfa_offset 24
	pop r14
	.cfi_def_cfa_offset 16
	pop r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_def_cfa_offset 112
	mov rbx, rax
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:799
		pub unsafe fn drop_in_place<T: PointeeSized>(to_drop: *mut T) {
	mov rsi, qword ptr [rsp]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec/mod.rs:527
		if elem_layout.size() == 0 || self.cap.as_inner() == 0 {
	test rsi, rsi
	je .LBB19_10
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:799
		pub unsafe fn drop_in_place<T: PointeeSized>(to_drop: *mut T) {
	mov rdi, qword ptr [rsp + 8]
		// ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:114
		unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
	mov edx, 1
	call qword ptr [rip + __rustc::__rust_dealloc@GOTPCREL]
	mov rdi, rbx
	call _Unwind_Resume@PLT
	mov rbx, rax
	mov rdi, rsp
		// crates/hpc-core/src/api/opencl/kernel.rs:28
		}
	call core::ptr::drop_in_place<opencl3::program::Program>
.LBB19_10:
	mov rdi, rbx
	call _Unwind_Resume@PLT
		// crates/hpc-core/src/api/opencl/kernel.rs:20
		pub fn from_source(ctx: &'brand Context<'brand>, src: &str, name: &str) -> Result<Self> {
	call qword ptr [rip + core::panicking::panic_in_cleanup@GOTPCREL]
